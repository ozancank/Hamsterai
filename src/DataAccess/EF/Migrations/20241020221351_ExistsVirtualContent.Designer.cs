// <auto-generated />
using System;
using DataAccess.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.EF.Migrations
{
    [DbContext(typeof(HamsteraiDbContext))]
    [Migration("20241020221351_ExistsVirtualContent")]
    partial class ExistsVirtualContent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasColumnName("Branch")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<short>("No")
                        .HasColumnType("smallint")
                        .HasColumnName("No")
                        .HasColumnOrder(6);

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolId")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("No", "Branch", "SchoolId")
                        .IsUnique()
                        .HasDatabaseName("IX_ClassRooms_1");

                    b.ToTable("ClassRooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Branch = "A",
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            No = (short)1,
                            SchoolId = 1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 2,
                            Branch = "B",
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            No = (short)1,
                            SchoolId = 1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 3,
                            Branch = "C",
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            No = (short)1,
                            SchoolId = 1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Core.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("citext")
                        .HasColumnName("Description")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ParentId")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasAlternateKey("Name")
                        .HasName("UK_OperationClaims_Name");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admin",
                            Name = "Admin",
                            ParentId = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Core.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Created")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("CreatedByIp")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Expires")
                        .HasColumnOrder(3);

                    b.Property<string>("ReasonRevoked")
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("ReasonRevoked")
                        .HasColumnOrder(9);

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("ReplacedByToken")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Revoked")
                        .HasColumnOrder(6);

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("RevokedByIp")
                        .HasColumnOrder(7);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Token")
                        .HasColumnOrder(2);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<int?>("ConnectionId")
                        .HasColumnType("integer")
                        .HasColumnName("ConnectionId")
                        .HasColumnOrder(14);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Email")
                        .HasColumnOrder(11);

                    b.Property<byte?>("GroupId")
                        .HasColumnType("smallint")
                        .HasColumnName("GroupId")
                        .HasColumnOrder(15);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(2);

                    b.Property<bool>("MustPasswordChange")
                        .HasColumnType("boolean")
                        .HasColumnName("MustPasswordChange")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("citext")
                        .HasColumnName("Name")
                        .HasColumnOrder(7);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash")
                        .HasColumnOrder(5);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt")
                        .HasColumnOrder(4);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("citext")
                        .HasColumnName("Phone")
                        .HasColumnOrder(9);

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("citext")
                        .HasColumnName("ProfileUrl")
                        .HasColumnOrder(10);

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolId")
                        .HasColumnOrder(13);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("citext")
                        .HasColumnName("Surname")
                        .HasColumnOrder(8);

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("Type")
                        .HasColumnOrder(12);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("citext")
                        .HasColumnName("UserName")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UK_Users_Email");

                    b.HasIndex("GroupId");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("UK_Users_Phone");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UK_Users_UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "root@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Root",
                            PasswordHash = new byte[] { 169, 145, 33, 161, 147, 58, 15, 169, 19, 31, 236, 3, 128, 147, 151, 45, 188, 253, 68, 70, 153, 152, 73, 88, 253, 225, 151, 194, 216, 163, 110, 253, 172, 109, 2, 180, 132, 19, 48, 181, 217, 89, 227, 138, 159, 251, 96, 176, 113, 54, 11, 219, 157, 136, 251, 120, 124, 56, 153, 29, 36, 35, 129, 141 },
                            PasswordSalt = new byte[] { 22, 25, 49, 68, 114, 216, 25, 253, 239, 196, 230, 130, 40, 214, 153, 94, 28, 188, 154, 225, 50, 31, 161, 21, 4, 230, 179, 118, 232, 155, 171, 114, 197, 6, 252, 53, 35, 172, 165, 92, 20, 162, 101, 242, 248, 163, 238, 160, 154, 196, 49, 79, 75, 39, 86, 23, 235, 103, 53, 30, 125, 117, 85, 109, 131, 66, 2, 219, 134, 223, 230, 64, 180, 36, 225, 254, 237, 167, 255, 137, 54, 86, 113, 27, 104, 47, 172, 200, 53, 23, 217, 143, 228, 57, 211, 92, 242, 99, 140, 90, 93, 1, 134, 181, 53, 38, 226, 125, 45, 80, 44, 8, 43, 67, 20, 84, 161, 155, 150, 7, 31, 182, 239, 204, 76, 162, 82, 81 },
                            Phone = "5000000001",
                            Surname = "Kullanıcı",
                            Type = (byte)1,
                            UserName = "root"
                        },
                        new
                        {
                            Id = 2L,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Admin",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000002",
                            Surname = "Kullanıcı",
                            Type = (byte)1,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 3L,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "okul@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Okul",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000003",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)2,
                            UserName = "Okul"
                        },
                        new
                        {
                            Id = 4L,
                            ConnectionId = 1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoca1@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Öğretmen 1",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000004",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)3,
                            UserName = "Hoca1"
                        },
                        new
                        {
                            Id = 5L,
                            ConnectionId = 2,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoca2@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Öğretmen 2",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000005",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)3,
                            UserName = "Hoca2"
                        },
                        new
                        {
                            Id = 6L,
                            ConnectionId = 1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ogrenci1@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Öğrenci 1",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000006",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)4,
                            UserName = "Öğrenci1"
                        },
                        new
                        {
                            Id = 7L,
                            ConnectionId = 2,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ogrenci2@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Öğrenci 2",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000007",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)4,
                            UserName = "Öğrenci2"
                        },
                        new
                        {
                            Id = 8L,
                            ConnectionId = 3,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ogrenci3@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Öğrenci 3",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000008",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)4,
                            UserName = "Öğrenci3"
                        },
                        new
                        {
                            Id = 9L,
                            ConnectionId = 4,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ogrenci4@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Öğrenci 4",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000009",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)4,
                            UserName = "Öğrenci4"
                        },
                        new
                        {
                            Id = 10L,
                            ConnectionId = 5,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ogrenci5@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Öğrenci 5",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000010",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)4,
                            UserName = "Öğrenci5"
                        },
                        new
                        {
                            Id = 11L,
                            ConnectionId = 6,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ogrenci6@mail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Öğrenci 6",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5000000011",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            Type = (byte)4,
                            UserName = "Öğrenci6"
                        },
                        new
                        {
                            Id = 12L,
                            ConnectionId = 7,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ozancank@gmail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Ozan Can",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5069151010",
                            SchoolId = 1,
                            Surname = "Kösemez",
                            Type = (byte)4,
                            UserName = "ozancank@gmail.com"
                        },
                        new
                        {
                            Id = 13L,
                            ConnectionId = 8,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "942alicankesen@gmail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Alican",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5313914388",
                            SchoolId = 1,
                            Surname = "Kesen",
                            Type = (byte)4,
                            UserName = "942alicankesen@gmail.com"
                        },
                        new
                        {
                            Id = 14L,
                            ConnectionId = 9,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "balcan1905@gmail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Eyüp",
                            PasswordHash = new byte[] { 91, 194, 62, 143, 170, 150, 7, 228, 50, 239, 166, 107, 207, 24, 2, 7, 203, 74, 96, 38, 172, 98, 246, 47, 95, 139, 182, 129, 194, 123, 154, 92, 176, 160, 43, 225, 40, 197, 64, 221, 241, 92, 215, 64, 33, 0, 43, 23, 69, 19, 45, 253, 198, 229, 249, 127, 17, 216, 37, 153, 50, 186, 168, 162 },
                            PasswordSalt = new byte[] { 110, 138, 57, 138, 8, 214, 100, 204, 96, 244, 112, 122, 216, 29, 143, 233, 207, 44, 246, 94, 145, 242, 43, 105, 129, 206, 65, 48, 233, 219, 35, 237, 138, 38, 46, 252, 49, 89, 130, 30, 31, 164, 44, 32, 185, 212, 83, 225, 98, 112, 163, 142, 69, 255, 194, 130, 80, 230, 18, 42, 105, 158, 161, 163, 212, 99, 63, 48, 166, 190, 0, 193, 209, 227, 88, 214, 227, 127, 237, 209, 34, 245, 113, 202, 224, 237, 193, 49, 143, 88, 2, 63, 145, 186, 148, 230, 187, 10, 74, 170, 207, 173, 100, 18, 117, 202, 224, 138, 24, 82, 148, 101, 188, 135, 109, 153, 7, 7, 30, 140, 252, 99, 195, 195, 20, 24, 253, 151 },
                            Phone = "5550593005",
                            SchoolId = 1,
                            Surname = "Balcan",
                            Type = (byte)4,
                            UserName = "balcan1905@gmail.com"
                        },
                        new
                        {
                            Id = 15L,
                            CreateDate = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kazimyildirimeng@gmail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Kazım",
                            PasswordHash = new byte[] { 186, 31, 96, 48, 95, 78, 158, 166, 85, 180, 187, 134, 246, 224, 115, 214, 111, 80, 51, 192, 138, 129, 200, 8, 1, 31, 183, 138, 110, 232, 23, 68, 117, 97, 147, 141, 33, 52, 101, 79, 162, 46, 153, 107, 207, 73, 111, 234, 192, 119, 232, 192, 21, 66, 179, 216, 87, 72, 216, 181, 95, 59, 109, 162 },
                            PasswordSalt = new byte[] { 174, 222, 90, 210, 27, 13, 26, 160, 176, 57, 91, 39, 224, 32, 135, 218, 59, 222, 74, 61, 12, 41, 215, 48, 59, 181, 35, 162, 42, 142, 223, 232, 224, 172, 216, 100, 255, 252, 82, 87, 138, 99, 90, 181, 169, 189, 219, 44, 46, 161, 190, 185, 145, 56, 27, 69, 79, 138, 117, 62, 193, 77, 101, 124, 35, 4, 133, 97, 27, 239, 210, 160, 152, 223, 205, 92, 141, 5, 252, 162, 186, 38, 248, 210, 252, 119, 53, 66, 33, 157, 253, 74, 164, 131, 117, 233, 172, 99, 167, 200, 54, 59, 162, 8, 126, 247, 95, 97, 143, 181, 226, 132, 117, 168, 71, 54, 38, 229, 15, 196, 150, 93, 138, 167, 89, 254, 27, 124 },
                            Phone = "5413695228",
                            Surname = "Yıldırım",
                            Type = (byte)1,
                            UserName = "kazim"
                        },
                        new
                        {
                            Id = 18L,
                            CreateDate = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kazimyildirimeng1@gmail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Kazım",
                            PasswordHash = new byte[] { 186, 31, 96, 48, 95, 78, 158, 166, 85, 180, 187, 134, 246, 224, 115, 214, 111, 80, 51, 192, 138, 129, 200, 8, 1, 31, 183, 138, 110, 232, 23, 68, 117, 97, 147, 141, 33, 52, 101, 79, 162, 46, 153, 107, 207, 73, 111, 234, 192, 119, 232, 192, 21, 66, 179, 216, 87, 72, 216, 181, 95, 59, 109, 162 },
                            PasswordSalt = new byte[] { 174, 222, 90, 210, 27, 13, 26, 160, 176, 57, 91, 39, 224, 32, 135, 218, 59, 222, 74, 61, 12, 41, 215, 48, 59, 181, 35, 162, 42, 142, 223, 232, 224, 172, 216, 100, 255, 252, 82, 87, 138, 99, 90, 181, 169, 189, 219, 44, 46, 161, 190, 185, 145, 56, 27, 69, 79, 138, 117, 62, 193, 77, 101, 124, 35, 4, 133, 97, 27, 239, 210, 160, 152, 223, 205, 92, 141, 5, 252, 162, 186, 38, 248, 210, 252, 119, 53, 66, 33, 157, 253, 74, 164, 131, 117, 233, 172, 99, 167, 200, 54, 59, 162, 8, 126, 247, 95, 97, 143, 181, 226, 132, 117, 168, 71, 54, 38, 229, 15, 196, 150, 93, 138, 167, 89, 254, 27, 124 },
                            Phone = "54136952281",
                            Surname = "Yıldırım",
                            Type = (byte)1,
                            UserName = "kazim1"
                        },
                        new
                        {
                            Id = 19L,
                            CreateDate = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kazimyildirimeng2@gmail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Kazım",
                            PasswordHash = new byte[] { 186, 31, 96, 48, 95, 78, 158, 166, 85, 180, 187, 134, 246, 224, 115, 214, 111, 80, 51, 192, 138, 129, 200, 8, 1, 31, 183, 138, 110, 232, 23, 68, 117, 97, 147, 141, 33, 52, 101, 79, 162, 46, 153, 107, 207, 73, 111, 234, 192, 119, 232, 192, 21, 66, 179, 216, 87, 72, 216, 181, 95, 59, 109, 162 },
                            PasswordSalt = new byte[] { 174, 222, 90, 210, 27, 13, 26, 160, 176, 57, 91, 39, 224, 32, 135, 218, 59, 222, 74, 61, 12, 41, 215, 48, 59, 181, 35, 162, 42, 142, 223, 232, 224, 172, 216, 100, 255, 252, 82, 87, 138, 99, 90, 181, 169, 189, 219, 44, 46, 161, 190, 185, 145, 56, 27, 69, 79, 138, 117, 62, 193, 77, 101, 124, 35, 4, 133, 97, 27, 239, 210, 160, 152, 223, 205, 92, 141, 5, 252, 162, 186, 38, 248, 210, 252, 119, 53, 66, 33, 157, 253, 74, 164, 131, 117, 233, 172, 99, 167, 200, 54, 59, 162, 8, 126, 247, 95, 97, 143, 181, 226, 132, 117, 168, 71, 54, 38, 229, 15, 196, 150, 93, 138, 167, 89, 254, 27, 124 },
                            Phone = "54136952282",
                            Surname = "Yıldırım",
                            Type = (byte)1,
                            UserName = "kazim2"
                        },
                        new
                        {
                            Id = 20L,
                            CreateDate = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kazimyildirimeng3@gmail.com",
                            GroupId = (byte)5,
                            IsActive = true,
                            MustPasswordChange = false,
                            Name = "Kazım",
                            PasswordHash = new byte[] { 186, 31, 96, 48, 95, 78, 158, 166, 85, 180, 187, 134, 246, 224, 115, 214, 111, 80, 51, 192, 138, 129, 200, 8, 1, 31, 183, 138, 110, 232, 23, 68, 117, 97, 147, 141, 33, 52, 101, 79, 162, 46, 153, 107, 207, 73, 111, 234, 192, 119, 232, 192, 21, 66, 179, 216, 87, 72, 216, 181, 95, 59, 109, 162 },
                            PasswordSalt = new byte[] { 174, 222, 90, 210, 27, 13, 26, 160, 176, 57, 91, 39, 224, 32, 135, 218, 59, 222, 74, 61, 12, 41, 215, 48, 59, 181, 35, 162, 42, 142, 223, 232, 224, 172, 216, 100, 255, 252, 82, 87, 138, 99, 90, 181, 169, 189, 219, 44, 46, 161, 190, 185, 145, 56, 27, 69, 79, 138, 117, 62, 193, 77, 101, 124, 35, 4, 133, 97, 27, 239, 210, 160, 152, 223, 205, 92, 141, 5, 252, 162, 186, 38, 248, 210, 252, 119, 53, 66, 33, 157, 253, 74, 164, 131, 117, 233, 172, 99, 167, 200, 54, 59, 162, 8, 126, 247, 95, 97, 143, 181, 226, 132, 117, 168, 71, 54, 38, 229, 15, 196, 150, 93, 138, 167, 89, 254, 27, 124 },
                            Phone = "54136952283",
                            Surname = "Yıldırım",
                            Type = (byte)1,
                            UserName = "kazim3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Core.UserOperationClaim", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("integer")
                        .HasColumnName("OperationClaimId")
                        .HasColumnOrder(2);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            OperationClaimId = 1,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Gain", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<byte>("LessonId")
                        .HasColumnType("smallint")
                        .HasColumnName("LessonId")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("Name")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("Name", "LessonId")
                        .IsUnique()
                        .HasDatabaseName("IX_Gains_1");

                    b.ToTable("Gains", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("Name")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasAlternateKey("Name")
                        .HasName("UK_Groups_Name");

                    b.ToTable("Groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 1L,
                            IsActive = true,
                            Name = "Sözel",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 1L
                        },
                        new
                        {
                            Id = (byte)2,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 1L,
                            IsActive = true,
                            Name = "Sayısal",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 1L
                        },
                        new
                        {
                            Id = (byte)3,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 1L,
                            IsActive = true,
                            Name = "Eşit Ağırlık",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 1L
                        },
                        new
                        {
                            Id = (byte)4,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 1L,
                            IsActive = true,
                            Name = "Yabancı Dil",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 1L
                        },
                        new
                        {
                            Id = (byte)5,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 1L,
                            IsActive = true,
                            Name = "Hepsi",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 1L
                        },
                        new
                        {
                            Id = (byte)6,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 1L,
                            IsActive = true,
                            Name = "Orta Okul",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 1L
                        },
                        new
                        {
                            Id = (byte)7,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 1L,
                            IsActive = true,
                            Name = "Lise",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 1L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Homework", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("citext")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("ClassRoomId")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("FilePath")
                        .HasColumnOrder(9);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<byte>("LessonId")
                        .HasColumnType("smallint")
                        .HasColumnName("LessonId")
                        .HasColumnOrder(8);

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolId")
                        .HasColumnOrder(6);

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("TeacherId")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CreateUser");

                    b.HasIndex("LessonId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Homeworks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HomeworkStudent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("citext")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("AnswerPath")
                        .HasColumnType("citext")
                        .HasColumnName("AnswerPath")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<string>("HomeworkId")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("HomeworkId")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status")
                        .HasColumnOrder(9);

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("StudentId")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworkStudents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("Name")
                        .HasColumnOrder(6);

                    b.Property<byte>("SortNo")
                        .HasColumnType("smallint")
                        .HasColumnName("SortNo")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasAlternateKey("Name")
                        .HasName("UK_Lessons_Name");

                    b.ToTable("Lessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Türkçe",
                            SortNo = (byte)1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)2,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Matematik",
                            SortNo = (byte)2,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)3,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "İngilizce",
                            SortNo = (byte)3,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)4,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Fen Bilimleri",
                            SortNo = (byte)4,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)5,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Fizik",
                            SortNo = (byte)5,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)6,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Kimya",
                            SortNo = (byte)6,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)7,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Biyoloji",
                            SortNo = (byte)7,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)8,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Edebiyat",
                            SortNo = (byte)8,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)9,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Tarih",
                            SortNo = (byte)9,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)10,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Coğrafya",
                            SortNo = (byte)10,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)11,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Felsefe",
                            SortNo = (byte)11,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = (byte)12,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            Name = "Din Kültürü",
                            SortNo = (byte)12,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.LessonGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<byte>("GroupId")
                        .HasColumnType("smallint")
                        .HasColumnName("GroupId")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<byte>("LessonId")
                        .HasColumnType("smallint")
                        .HasColumnName("LessonId")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("GroupId", "LessonId")
                        .IsUnique()
                        .HasDatabaseName("IX_LessonGroups_1");

                    b.ToTable("LessonGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec0"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)1,
                            IsActive = true,
                            LessonId = (byte)1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec1"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)2,
                            IsActive = true,
                            LessonId = (byte)2,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec2"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)1,
                            IsActive = true,
                            LessonId = (byte)3,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec3"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)2,
                            IsActive = true,
                            LessonId = (byte)4,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec4"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)2,
                            IsActive = true,
                            LessonId = (byte)5,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec5"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)2,
                            IsActive = true,
                            LessonId = (byte)6,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec6"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)2,
                            IsActive = true,
                            LessonId = (byte)7,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec7"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)1,
                            IsActive = true,
                            LessonId = (byte)8,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec8"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)1,
                            IsActive = true,
                            LessonId = (byte)9,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec9"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)1,
                            IsActive = true,
                            LessonId = (byte)10,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedeca"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)1,
                            IsActive = true,
                            LessonId = (byte)11,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedecb"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            GroupId = (byte)1,
                            IsActive = true,
                            LessonId = (byte)12,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("Body")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRead")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ReadDate")
                        .HasColumnOrder(8);

                    b.Property<string>("ReasonId")
                        .HasColumnType("citext")
                        .HasColumnName("ReasonId")
                        .HasColumnOrder(12);

                    b.Property<long>("ReceiveredUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("ReceiveredUserId")
                        .HasColumnOrder(6);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("Title")
                        .HasColumnOrder(9);

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("Type")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CreateUser");

                    b.HasIndex("ReceiveredUserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.NotificationDeviceToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(1);

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("DeviceToken")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(2);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationDeviceTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PasswordToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Expried")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Expried")
                        .HasColumnOrder(4);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Token")
                        .HasColumnOrder(3);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PasswordTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("AnswerPictureExtension")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasDefaultValue("")
                        .HasColumnName("AnswerPictureExtension")
                        .HasColumnOrder(13);

                    b.Property<string>("AnswerPictureFileName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("citext")
                        .HasDefaultValue("")
                        .HasColumnName("AnswerPictureFileName")
                        .HasColumnOrder(12);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("AnswerText")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("ExcludeQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ExcludeQuiz")
                        .HasColumnOrder(19);

                    b.Property<bool>("ExistsVirtualContent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ExistsVirtualContent")
                        .HasColumnOrder(20);

                    b.Property<int?>("GainId")
                        .HasColumnType("integer")
                        .HasColumnName("GainId")
                        .HasColumnOrder(17);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsRead")
                        .HasColumnOrder(14);

                    b.Property<byte>("LessonId")
                        .HasColumnType("smallint")
                        .HasColumnName("LessonId")
                        .HasColumnOrder(6);

                    b.Property<string>("QuestionPictureBase64")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("QuestionPictureBase64")
                        .HasColumnOrder(7);

                    b.Property<string>("QuestionPictureExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasColumnName("QuestionPictureExtension")
                        .HasColumnOrder(9);

                    b.Property<string>("QuestionPictureFileName")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("QuestionPictureFileName")
                        .HasColumnOrder(8);

                    b.Property<char?>("RightOption")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("RightOption")
                        .HasColumnOrder(18);

                    b.Property<bool>("SendForQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("SendForQuiz")
                        .HasColumnOrder(15);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status")
                        .HasColumnOrder(11);

                    b.Property<byte>("TryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("TryCount")
                        .HasColumnOrder(16);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CreateUser");

                    b.HasIndex("GainId");

                    b.HasIndex("LessonId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<byte>("CorrectCount")
                        .HasColumnType("smallint")
                        .HasColumnName("CorrectCount")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<byte>("EmptyCount")
                        .HasColumnType("smallint")
                        .HasColumnName("EmptyCount")
                        .HasColumnOrder(12);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<byte>("LessonId")
                        .HasColumnType("smallint")
                        .HasColumnName("LessonId")
                        .HasColumnOrder(7);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status")
                        .HasColumnOrder(9);

                    b.Property<double>("SuccessRate")
                        .HasColumnType("double precision")
                        .HasColumnName("SuccessRate")
                        .HasColumnOrder(13);

                    b.Property<int>("TimeSecond")
                        .HasColumnType("integer")
                        .HasColumnName("TimeSecond")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId")
                        .HasColumnOrder(6);

                    b.Property<byte>("WrongCount")
                        .HasColumnType("smallint")
                        .HasColumnName("WrongCount")
                        .HasColumnOrder(11);

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.QuizQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("Answer")
                        .HasColumnOrder(11);

                    b.Property<char?>("AnswerOption")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("AnswerOption")
                        .HasColumnOrder(15);

                    b.Property<string>("AnswerPictureExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasColumnName("AnswerPictureExtension")
                        .HasColumnOrder(13);

                    b.Property<string>("AnswerPictureFileName")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("AnswerPictureFileName")
                        .HasColumnOrder(12);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<int>("GainId")
                        .HasColumnType("integer")
                        .HasColumnName("GainId")
                        .HasColumnOrder(17);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<byte>("OptionCount")
                        .HasColumnType("smallint")
                        .HasColumnName("OptionCount")
                        .HasColumnOrder(16);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("Question")
                        .HasColumnOrder(8);

                    b.Property<string>("QuestionPictureExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasColumnName("QuestionPictureExtension")
                        .HasColumnOrder(10);

                    b.Property<string>("QuestionPictureFileName")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("QuestionPictureFileName")
                        .HasColumnOrder(9);

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("QuizId")
                        .HasColumnOrder(7);

                    b.Property<char>("RightOption")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("RightOption")
                        .HasColumnOrder(14);

                    b.Property<byte>("SortNo")
                        .HasColumnType("smallint")
                        .HasColumnName("SortNo")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("GainId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("Address")
                        .HasColumnOrder(8);

                    b.Property<string>("AuthorizedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("AuthorizedEmail")
                        .HasColumnOrder(12);

                    b.Property<string>("AuthorizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("AuthorizedName")
                        .HasColumnOrder(10);

                    b.Property<string>("AuthorizedPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("citext")
                        .HasColumnName("AuthorizedPhone")
                        .HasColumnOrder(11);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("City")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LicenseEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LicenseEndDate")
                        .HasColumnOrder(14);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("citext")
                        .HasColumnName("Name")
                        .HasColumnOrder(6);

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("citext")
                        .HasColumnName("TaxNumber")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.Property<int>("UserCount")
                        .HasColumnType("integer")
                        .HasColumnName("UserCount")
                        .HasColumnOrder(13);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UK_Schools_Name");

                    b.HasIndex("TaxNumber")
                        .IsUnique()
                        .HasDatabaseName("UK_Schools_TaxNumber");

                    b.ToTable("Schools", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "TeknoPark",
                            AuthorizedEmail = "okul@mail.com",
                            AuthorizedName = "Yetkili",
                            AuthorizedPhone = "5999999999",
                            City = "Gaziantep",
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            LicenseEndDate = new DateTime(2050, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hamster Koleji",
                            TaxNumber = "9999999999",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L,
                            UserCount = 157
                        });
                });

            modelBuilder.Entity("Domain.Entities.SchoolGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<byte>("GroupId")
                        .HasColumnType("smallint")
                        .HasColumnName("GroupId")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolId")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("GroupId", "SchoolId")
                        .IsUnique()
                        .HasDatabaseName("IX_SchoolGroups_1");

                    b.ToTable("SchoolGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec0"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 1L,
                            GroupId = (byte)5,
                            IsActive = true,
                            SchoolId = 1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 1L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Similar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("ExcludeQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ExcludeQuiz")
                        .HasColumnOrder(22);

                    b.Property<int?>("GainId")
                        .HasColumnType("integer")
                        .HasColumnName("GainId")
                        .HasColumnOrder(20);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsRead")
                        .HasColumnOrder(17);

                    b.Property<byte>("LessonId")
                        .HasColumnType("smallint")
                        .HasColumnName("LessonId")
                        .HasColumnOrder(6);

                    b.Property<string>("QuestionPicture")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("QuestionPicture")
                        .HasColumnOrder(7);

                    b.Property<string>("QuestionPictureExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasColumnName("QuestionPictureExtension")
                        .HasColumnOrder(9);

                    b.Property<string>("QuestionPictureFileName")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("QuestionPictureFileName")
                        .HasColumnOrder(8);

                    b.Property<string>("ResponseAnswer")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("ResponseAnswer")
                        .HasColumnOrder(13);

                    b.Property<string>("ResponseAnswerExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasColumnName("ResponseAnswerExtension")
                        .HasColumnOrder(15);

                    b.Property<string>("ResponseAnswerFileName")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("ResponseAnswerFileName")
                        .HasColumnOrder(14);

                    b.Property<string>("ResponseQuestion")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("ResponseQuestion")
                        .HasColumnOrder(10);

                    b.Property<string>("ResponseQuestionExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("citext")
                        .HasColumnName("ResponseQuestionExtension")
                        .HasColumnOrder(12);

                    b.Property<string>("ResponseQuestionFileName")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("ResponseQuestionFileName")
                        .HasColumnOrder(11);

                    b.Property<char?>("RightOption")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("RightOption")
                        .HasColumnOrder(21);

                    b.Property<bool>("SendForQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("SendForQuiz")
                        .HasColumnOrder(18);

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status")
                        .HasColumnOrder(16);

                    b.Property<int>("TryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("TryCount")
                        .HasColumnOrder(19);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CreateUser");

                    b.HasIndex("GainId");

                    b.HasIndex("LessonId");

                    b.ToTable("SimilarQuestions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("ClassRoomId")
                        .HasColumnOrder(12);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Email")
                        .HasColumnOrder(11);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("Name")
                        .HasColumnOrder(6);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("citext")
                        .HasColumnName("Phone")
                        .HasColumnOrder(10);

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("citext")
                        .HasColumnName("StudentNo")
                        .HasColumnOrder(8);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("Surname")
                        .HasColumnOrder(7);

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("citext")
                        .HasColumnName("TcNo")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UK_Students_Email");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("UK_Students_Phone");

                    b.HasIndex("TcNo")
                        .IsUnique()
                        .HasDatabaseName("UK_Students_TcNo");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassRoomId = 1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "ogrenci1@mail.com",
                            IsActive = true,
                            Name = "Öğrenci 1",
                            Phone = "5000000006",
                            StudentNo = "001",
                            Surname = "Kullanıcı",
                            TcNo = "33333333333",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 2,
                            ClassRoomId = 1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "ogrenci2@mail.com",
                            IsActive = true,
                            Name = "Öğrenci 2",
                            Phone = "5000000007",
                            StudentNo = "002",
                            Surname = "Kullanıcı",
                            TcNo = "44444444444",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 3,
                            ClassRoomId = 2,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "ogrenci3@mail.com",
                            IsActive = true,
                            Name = "Öğrenci 3",
                            Phone = "5000000008",
                            StudentNo = "003",
                            Surname = "Kullanıcı",
                            TcNo = "55555555555",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 4,
                            ClassRoomId = 2,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "ogrenci4@mail.com",
                            IsActive = true,
                            Name = "Öğrenci 4",
                            Phone = "5000000009",
                            StudentNo = "004",
                            Surname = "Kullanıcı",
                            TcNo = "66666666666",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 5,
                            ClassRoomId = 3,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "ogrenci5@mail.com",
                            IsActive = true,
                            Name = "Öğrenci 5",
                            Phone = "5000000010",
                            StudentNo = "005",
                            Surname = "Kullanıcı",
                            TcNo = "77777777777",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 6,
                            ClassRoomId = 3,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "ogrenci6@mail.com",
                            IsActive = true,
                            Name = "Öğrenci 6",
                            Phone = "5000000011",
                            StudentNo = "006",
                            Surname = "Kullanıcı",
                            TcNo = "88888888888",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 7,
                            ClassRoomId = 1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "ozancank@gmail.com",
                            IsActive = true,
                            Name = "Ozan Can",
                            Phone = "5069151010",
                            StudentNo = "007",
                            Surname = "Kösemez",
                            TcNo = "12312312399",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 8,
                            ClassRoomId = 1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "942alicankesen@gmail.com",
                            IsActive = true,
                            Name = "Alican",
                            Phone = "5313914388",
                            StudentNo = "008",
                            Surname = "Kesen",
                            TcNo = "12312312388",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 9,
                            ClassRoomId = 1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "balcan1905@gmail.com",
                            IsActive = true,
                            Name = "Eyüp",
                            Phone = "5550593005",
                            StudentNo = "009",
                            Surname = "Balcan",
                            TcNo = "12312312377",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("citext")
                        .HasColumnName("Branch")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Email")
                        .HasColumnOrder(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Name")
                        .HasColumnOrder(6);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("citext")
                        .HasColumnName("Phone")
                        .HasColumnOrder(9);

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolId")
                        .HasColumnOrder(12);

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("Surname")
                        .HasColumnOrder(7);

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("citext")
                        .HasColumnName("TcNo")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UK_Teachers_Email");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("UK_Teachers_Phone");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TcNo")
                        .IsUnique()
                        .HasDatabaseName("UK_Teachers_TcNo");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Branch = "Matematik",
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "hoca1@mail.com",
                            IsActive = true,
                            Name = "Öğretmen 1",
                            Phone = "5000000004",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            TcNo = "11111111111",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = 2,
                            Branch = "Türkçe",
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            Email = "hoca2@mail.com",
                            IsActive = true,
                            Name = "Öğretmen 2",
                            Phone = "5000000005",
                            SchoolId = 1,
                            Surname = "Kullanıcı",
                            TcNo = "22222222222",
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.TeacherClassRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("ClassRoomId")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("TeacherId")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("TeacherId", "ClassRoomId")
                        .IsUnique()
                        .HasDatabaseName("IX_TeacherClassRooms_1");

                    b.ToTable("TeacherClassRooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec0"),
                            ClassRoomId = 1,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            TeacherId = 1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec1"),
                            ClassRoomId = 2,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            TeacherId = 2,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec2"),
                            ClassRoomId = 3,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            TeacherId = 1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec3"),
                            ClassRoomId = 3,
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            TeacherId = 2,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.TeacherLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreateDate")
                        .HasColumnOrder(3);

                    b.Property<long>("CreateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("CreateUser")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(1);

                    b.Property<byte>("LessonId")
                        .HasColumnType("smallint")
                        .HasColumnName("LessonId")
                        .HasColumnOrder(7);

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("TeacherId")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdateDate")
                        .HasColumnOrder(5);

                    b.Property<long>("UpdateUser")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdateUser")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId", "LessonId")
                        .IsUnique()
                        .HasDatabaseName("IX_TeacherLessons_1");

                    b.ToTable("TeacherLessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec0"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            LessonId = (byte)2,
                            TeacherId = 1,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        },
                        new
                        {
                            Id = new Guid("a1a84a26-a7e4-4671-a979-d65fbbbedec1"),
                            CreateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = 2L,
                            IsActive = true,
                            LessonId = (byte)1,
                            TeacherId = 2,
                            UpdateDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUser = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.ClassRoom", b =>
                {
                    b.HasOne("Domain.Entities.School", "School")
                        .WithMany("ClassRooms")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.Core.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Core.User", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.HasOne("Domain.Entities.School", "School")
                        .WithMany("Users")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Group");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.Core.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.Core.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Gain", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("Gains")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Domain.Entities.Homework", b =>
                {
                    b.HasOne("Domain.Entities.ClassRoom", "ClassRoom")
                        .WithMany("Homeworks")
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany("Homeworks")
                        .HasForeignKey("CreateUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("Homeworks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.School", "School")
                        .WithMany("Homeworks")
                        .HasForeignKey("SchoolId");

                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("Homeworks")
                        .HasForeignKey("TeacherId");

                    b.Navigation("ClassRoom");

                    b.Navigation("Lesson");

                    b.Navigation("School");

                    b.Navigation("Teacher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.HomeworkStudent", b =>
                {
                    b.HasOne("Domain.Entities.Homework", "Homework")
                        .WithMany("HomeworkStudents")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("HomeworkStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.LessonGroup", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("LessonGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonGroups")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.Core.User", "SenderUser")
                        .WithMany("SendNotification")
                        .HasForeignKey("CreateUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Core.User", "ReceiveredUser")
                        .WithMany("ReceivedNotification")
                        .HasForeignKey("ReceiveredUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReceiveredUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Domain.Entities.NotificationDeviceToken", b =>
                {
                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany("NotificationDeviceTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PasswordToken", b =>
                {
                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany("PasswordTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("CreateUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Gain", "Gain")
                        .WithMany("Questions")
                        .HasForeignKey("GainId");

                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gain");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("Quizzes")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany("Quizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.QuizQuestion", b =>
                {
                    b.HasOne("Domain.Entities.Gain", "Gain")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("GainId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gain");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Domain.Entities.SchoolGroup", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("SchoolGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.School", "School")
                        .WithMany("SchoolGroups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.Similar", b =>
                {
                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany("SimilarQuestions")
                        .HasForeignKey("CreateUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Gain", "Gain")
                        .WithMany("SimilarQuestions")
                        .HasForeignKey("GainId");

                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("SimilarQuestions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Gain");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.ClassRoom", "ClassRoom")
                        .WithMany("Students")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClassRoom");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Domain.Entities.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", null)
                        .WithMany("Teachers")
                        .HasForeignKey("StudentId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.TeacherClassRoom", b =>
                {
                    b.HasOne("Domain.Entities.ClassRoom", "ClassRoom")
                        .WithMany("TeacherClassRooms")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("TeacherClassRooms")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.TeacherLesson", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("TeacherLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("TeacherLessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.ClassRoom", b =>
                {
                    b.Navigation("Homeworks");

                    b.Navigation("Students");

                    b.Navigation("TeacherClassRooms");
                });

            modelBuilder.Entity("Domain.Entities.Core.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Core.User", b =>
                {
                    b.Navigation("Homeworks");

                    b.Navigation("NotificationDeviceTokens");

                    b.Navigation("PasswordTokens");

                    b.Navigation("Questions");

                    b.Navigation("Quizzes");

                    b.Navigation("ReceivedNotification");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SendNotification");

                    b.Navigation("SimilarQuestions");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Gain", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("SimilarQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Navigation("LessonGroups");

                    b.Navigation("SchoolGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Homework", b =>
                {
                    b.Navigation("HomeworkStudents");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Gains");

                    b.Navigation("Homeworks");

                    b.Navigation("LessonGroups");

                    b.Navigation("Questions");

                    b.Navigation("Quizzes");

                    b.Navigation("SimilarQuestions");

                    b.Navigation("TeacherLessons");
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("Domain.Entities.School", b =>
                {
                    b.Navigation("ClassRooms");

                    b.Navigation("Homeworks");

                    b.Navigation("SchoolGroups");

                    b.Navigation("Teachers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("HomeworkStudents");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Homeworks");

                    b.Navigation("TeacherClassRooms");

                    b.Navigation("TeacherLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
